'''---知识点：函数---'''

'''
    1.函数也是一个对象
    2.对象是内存中专门用来存储数据的一块区域
    3.保存一些可执行代码，可以多次调用
    4.def 函数名([形参1,形参2,形参3...]):
        #代码块
    5.形参（形式参数）是用来接收调用该函数时传递的参数，多个形参使用逗号隔开
      定义形参就相当于在函数内部定义了变量，但是没有赋值
    6.实参（实际参数）：在调用有参函数时，函数名后面括号中的参数称为“实际参数”
      函数定义时指定了形参，调用时也必须传递相对应个实参
    7.func是函数对象，func()是调用函数
    8.定义形参时，可以为形参指定一个默认值,若传递了参数，默认值则不会有任何作用
    9.位置传参：实参和形参位置相对应
    10.关键字传参：可以不按定义的顺序传参，根据参数名来传参
    11.位置传参可以与关键字传参混合使用，但位置传参必须在关键字传参前面
    12.函数在调用时不检查实参的类型，故实参的类型可以是任意的对象
    13.在函数中对形参重新赋值不会影响其他变量
    14.当我们通过形参去修改对象时，会影响到指向该对象的变量
    15.定义函数的时候，在形参的前面加上一个*，这个形参会获取到所有的实参，将所有的实参保存到一个元组中
    16.将零散的参数统一放在一起成为装包
    17.不定长参数不是必须要写到最后的，但注意带*的参数后面的参数必须是关键字传参，否则报错
'''
def func():
    print('这是我的一个函数')

func() #调用函数
#打印func
print(func)  #打印函数 结果为：<function func at 0x000002AA22DE6F78> 是一个函数对象，其对应的内存地址为0x

def s(a,b): #传入形参
    num=a+b
    print(num)
s(2,3)  #5  #传入实参

#传入三个形参，为形参c赋一个初值10
def fn(a,b,c=10):
    print('a=',a)
    print('b=',b)
    print('c=',c)
fn(1,2)  #位置传参
fn(b=3,c=8,a=6)  #关键字传参

#两种传参混合使用
with open('123.txt','w',encoding='utf-8') as f: #关键字传参必须在后面
    pass

def fn1(a):
    print(a)
fn1(fn)  #可以传入一个函数对象，注意是函数对象，不是调用函数，故不用加（）


#
def fn2(a):
    a[0]=5
    print(a)
c=[1,2,3]
fn2(c)   #[5, 2, 3]   #会改变指向对象的变量c
print(c)  #[5, 2, 3]

fn2(c.copy())  #不会改变指向对象的变量c
fn2(c[:])    #不会改变指向对象的变量c

#不定长参数
#定义一个函数来实现任意数的和
#定义函数的时候，在形参的前面加上一个*，这个形参会获取到所有的实参，将所有的实参保存到一个元组中
#将零散的参数统一放在一起成为装包
def fn3(*a):
    r=0
    for n in a:   #遍历元组，实现任意数的相加
        r+=n
    print('r=',r,type(a))

fn3(2,3,4)  #a= (2, 3, 4)


def fn4(a,b,*c):
    print('a=',a)
    print('b=', b)  #b= 2
    print('c=', c)  #c= (3, 4, 5, 6)

fn4(1,2,3,4,5,6)

#不定长参数不是必须要写到最后的，但注意带*的参数后面的参数必须是关键字传参，否则报错
def fn5(a,*b,c=6):
    print('a=',a)
    print('b=', b)  #b= 2
    print('c=', c)  #c= (3, 4, 5, 6)

fn5(1,2,3,4,5,6)